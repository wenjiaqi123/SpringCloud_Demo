<?xml version="1.0" encoding="UTF-8"?>
<!--
    日志级别从低到高为 Trace < Debug < Info < Warn < Error < Fatal       如果设置成 Info ,那么低于 Info 的信息不会输出
    scan: 默认为true,配置文件发生改变,将会被重新加载
    scanPeriod: 设置检测配置文件是否有修改时间间隔,如果没有单位,默认是毫秒,当 scan 为 true 时,此属性生效。默认时间间隔为1分钟
    debug: 默认为 false,当为 true 时,将打印出 logback 内部日志,实时查看 logback 运行状态
-->
<configuration scan="true" scanPeriod="10 seconds">
    <!--
        name 是变量名称
        value 是变量的值
        被定义的值会被插入到 logger 的上下文中,定义变量后,可以使用 ${变量名} 来使用变量
    -->
    <property name="logPath" value="D:/logs"/>
    <property name="projectName" value="SpringCloud_Demo"/>

    <!-- 日志文件名称-->
    <property name="LOG_NAME" value="logback-spring"/>

    <!-- 日志文件编码-->
    <property name="log.charset" value="UTF-8"/>

    <!--
        name 随便取名, 用在<root> 标签中 appender-ref 的 ref
        class 表示对 某种形式的 配置,这里的 ConsoleAppender 就是配置控制台
        ConsoleAppender 表示配置控制台日志打印格式
    -->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 输出的日志内容格式化 格式化的参数,例如 %msg %thread 在 PatternLayout 类里-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} %yellow(%level) %magenta(%r)<!--[%thread]--> <!--%cyan(%logger)-->: %msg%n
            </pattern>
        </layout>
    </appender>

    <!--滚动输出到文件,等级为 Info-->
    <appender name="fileInfo" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件输出格式-->
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} %level : %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>

        <!--日志滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件名 按照 等级 日期 记录-->
            <fileNamePattern>
                ${logPath}/${projectName}/info/info_%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!--日志保留天数-->
            <maxHistory>365</maxHistory>
        </rollingPolicy>

        <!--日志记录等级-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--滚动输出到文件,等级为 Debug-->
    <appender name="fileDebug" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件输出格式-->
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} %level : %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>

        <!--日志滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件名 按照 等级 日期 记录-->
            <fileNamePattern>
                ${logPath}/${projectName}/debug/debug_%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!--日志保留天数-->
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <!--日志记录等级-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--滚动输出到文件,等级为 Error-->
    <appender name="fileError" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件输出格式-->
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} %level : %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>

        <!--日志滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件名-->
            <fileNamePattern>
                ${logPath}/${projectName}/error/error_%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!--日志保留天数-->
            <maxHistory>365</maxHistory>
        </rollingPolicy>

        <!--日志记录等级-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>


    <!--
        指定某个包的日志等级
    -->
    <logger name="com.gsm.dao" level="DEBUG"/>
    <logger name="com.gsm.controller" level="DEBUG"/>
    <logger name="com.gsm.service" level="DEBUG"/>

    <!--
        root 的必选节点,该配置文件里必须要有
        只有一个 level 属性,用来指定日志输出的最基础级别,默认为 Debug(大小写无关)
        可以有多个 appender-ref ,被标识的 appender 会被添加到该 logger
    -->
    <root level="info">
        <appender-ref ref="consoleAppender"/>
        <appender-ref ref="fileInfo"/>
        <appender-ref ref="fileDebug"/>
        <appender-ref ref="fileError"/>
    </root>
</configuration>
