<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!--项目坐标-->
    <groupId>com.gsm</groupId>
    <artifactId>SpringCloud_Demo</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!--打包方式,因为是聚合工程,打包pom-->
    <packaging>pom</packaging>

    <!--子模块-->
    <modules>
        <!--第一个服务-->
        <module>java_springboot</module>
        <!--lombok简化bean开发-->
        <module>java_lombok</module>
        <!--SpringMVC + Spring + Mybatis 整合-->
        <module>java_ssm</module>
        <!--事务-->
        <module>java_tx</module>
        <!--单元测试-->
        <module>java_test</module>
        <!--日志-->
        <module>java_log</module>
        <!--文件上传-->
        <module>java_file</module>
        <!--数据校验-->
        <module>java_validated</module>
        <!--拦截器-->
        <module>java_interceptor</module>
        <!--全局异常-->
        <module>java_exception</module>
        <!--登录-->
        <module>java_login</module>
        <!--认证鉴权-->
        <module>java_security</module>
        <!--定时任务-->
        <module>java_job</module>
        <!--异步编程-->
        <module>java_async</module>
        <!--Swagger接口文档-->
        <module>java_swagger</module>
        <!--WebSocket推送-->
        <module>java_websocket</module>
        <!--Spring 缓存 cache-->
        <module>java_cache</module>


        <!--Redis-->
        <module>java_redis</module>
        <!--Redis 发布订阅-->
        <module>java_redis_listener</module>
        <!--RabbitMQ 消息队列-->
        <module>java_rabbitmq</module>
        <!--RabbitMQ 发送回调-->
        <module>java_rabbitmq_ack</module>
        <!--MongoDB 文档数据库-->
        <module>java_mongodb</module>
        <!--ElasticSearch 检索-->
        <module>java_elasticsearch</module>
        <!--SpringDataJpa-->
        <module>java_jpa</module>


        <!--SpringCloud-->
        <!--配置中心-->
        <module>java_config</module>
        <!--Eureka注册中心-->
        <module>java_eureka</module>
        <!--Zuul网关-->
        <module>java_zuul</module>
    </modules>

    <name>SpringCloud_Demo Maven Webapp</name>
    <url>http://www.wyxjava.com</url>

    <!--基于springboot-->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.1.RELEASE</version>
        <relativePath/>
    </parent>

    <!--配置参数-->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <java.version>1.8</java.version>
    </properties>

    <dependencyManagement>
        <!--Eureka 锁定 SpringCloud版本-->
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Finchley.M9</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!--为了方便每个模块都模拟前端调用接口测试,在父pom里加上 mvc -->
        <!--整合SpringMVC-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!--基本上每个模块都用到实体类,所以在父pom里加上 lombok-->
        <!--lombok简化POJO开发-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
    </dependencies>

    <!--仓库源-->
    <repositories>
        <repository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>https://repo.spring.io/snapshot</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    <!--插件仓库源-->
    <pluginRepositories>
        <pluginRepository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>https://repo.spring.io/snapshot</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </pluginRepository>
        <pluginRepository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

    <build>
        <finalName>SpringCloud_Demo</finalName>
        <!--<plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>-->
        <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>
                <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.0</version>
                </plugin>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.22.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>3.2.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>
                <!--docker镜像配套Maven插件-->
                <!--<plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>1.0.0</version>
                    &lt;!&ndash;将插件绑定到某个Maven阶段执行&ndash;&gt;
                    <executions>
                        <execution>
                            <id>build-image</id>
                            &lt;!&ndash;这里是绑定到Maven的package阶段执行，当我们执行package命令，同时也会执行 mvn docker:build&ndash;&gt;
                            <phase>package</phase>
                            <goals>
                                <goal>build</goal>
                            </goals>
                        </execution>
                    </executions>

                    <configuration>
                        &lt;!&ndash;指定生成的镜像名&ndash;&gt;
                        <imageName>zdadmin/${project.artifactId}</imageName>
                        &lt;!&ndash;指定镜像版本，默认latest&ndash;&gt;
                        <imageTags>
                            <imageTag>latest</imageTag>
                        </imageTags>

                        &lt;!&ndash;指定项目中 DockerFile文件的路径 &ndash;&gt;
                        <dockerDirectory>${project.basedir}</dockerDirectory>

                        &lt;!&ndash;指定远程Docker地址&ndash;&gt;
                        &lt;!&ndash;<dockerHost>https://127.0.0.1:2376</dockerHost>&ndash;&gt;
                        <dockerHost>https://47.100.163.218:2376</dockerHost>

                        <resources>
                            <resource>
                                &lt;!&ndash;生成的jar包，war包所在的路径，配置的是对应target的目录&ndash;&gt;
                                <direcotry>${project.build.directory}</direcotry>
                                &lt;!&ndash;需要包含的jar包，对应的是 DockerFile 添加的名字&ndash;&gt;
                                <include>${project.build.finalName}</include>
                            </resource>
                        </resources>

                        &lt;!&ndash;将 docker push 到 DockerHub&ndash;&gt;
                        <serverId>docker-hub</serverId>
                        <registryUrl>https://hub.docker.com/repository/docker/wenjiaqi/wyxjava</registryUrl>
                    </configuration>
                </plugin>-->
            </plugins>
        </pluginManagement>

        <!--配置src/main/java 可以引入 xml-->
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*.xml</include>
                    <include>**/*.properties</include>
                    <include>**/*.yml</include>
                    <include>**/*.html</include>
                </includes>
            </resource>
        </resources>
    </build>
</project>